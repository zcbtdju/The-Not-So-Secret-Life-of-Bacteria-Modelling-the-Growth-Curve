include gro

fp := fopen ( "C:/Users/Daniel/Documents/Gro-LIA/GRO-LIA-master/0.1 Data/metabolism_info.csv", "w" );
sp := fopen ( "C:/Users/Daniel/Documents/Gro-LIA/GRO-LIA-master/0.1 Data/metabolism_stats.csv", "w" );

set("ecoli_growth_rate",0.0);
set ("dt", 0.01);
set("population_max", 20000);

fun div x y . x / y;
fun dormancy a b c d . a * b *((2.71828)^(c * d));
fun cell_death a b c . a * b * ((2.71828)^((-b*c)));
fun statistics L .
	let n := length(L), mu := (sumlist L) / n in
		[ num := n, mean := mu, std := sqrt (sumlist (map (\ x . (x-mu)^2) L) / n), sum := sumlist L ]
	end;

glycogen_limit := 41891294.09;

glucose_uti_lag_expo := 7941010.667;
glucose_uti_tran := 795934.5877;
glucose_uti_stationary := 397050.5333;
glucose_uti_death := 102457.6389;
glucose_uti_dormant := 1024.576389;

avg_proteins := 3.113965768E+9;	//*100% of average proteins converted into glucose
avg_volume := 2.611559094;
percent_consumption := 0.75;

num_cells := 1;
dor_cells := 0;
max_cells := 10;
dead_cells := 0;
total_cells := 0;

timestep := 0.01;



program p() := {

r := [t:=0, s:=0];
	true :{r.t := r.t + dt, r.s := r.s + dt}	
	
	proteins := 0;
	mode := 0;
	gfp := 0;
	die := 0;
	
	check := 0;
	mode = 1 : {check := check + 1}
	
	num_cells < max_cells : {set("ecoli_growth_rate", 0.25)}
	num_cells >= max_cells : {set("ecoli_growth_rate", 0)}
	
	r.t >= 100 : {mode := 1}
	mode = 0 : {proteins := (div (avg_proteins*percent_consumption) avg_volume)*volume}
	
	mode = 1 : {proteins := proteins - glucose_uti_stationary}
	proteins - glucose_uti_stationary <= 0 : {proteins := 0}
	
	mode = 1 & proteins <= 0 : {mode := 2}
	//mode = 2 : {gfp := 50*volume}
	mode = 2 : {die := 1, dead_cells := dead_cells + 1}
	die = 1 & rate (100) : {die()}
	
	
	daughter : {num_cells := num_cells + 1}
		
	selected :{
	print("mode=", mode, "proteins=", proteins, "volume=", volume, "check=", check)
	}
	

//r.t = 200 :{
//		r.t := 0,
//		fprint (cp, r.s, ", ", mode, ", ", num_cells, ", ", ext_glucose, ", ", glycogen_store, "\n")
//		}

r.t >= 10 & id = 0 :{
		r.t := 0,
		fprint (fp, r.s, ", ", volume, ", ", proteins, "\n")
		}

};

program main() := {

	percentage_dormant := 0;
	t := 0;
	s := 0;
	
	true : {t := t + dt, s := s + dt}
	
	
//t >= 0 : {
//    t := 0,
//    clear_messages(1),
//    message ( 1, "Dormant Cells = " <> tostring(dor_cells) <> "." ),
//	};

//repeat

	m := 0;
	n := 0;
	
	
m = 0 & n < 11 : {

	ecoli ([x:=0, y:=0], program p());

	
//foreach q in range num_cells do
//ecoli ( [ 
//x := rand(500)-250, 
//y := rand(500)-250, 
//theta := 0.01*rand(314) ], 
//program p())
//end,
	
	num_cells := 1,
	dor_cells := 0,
	max_cells := 1000,
	dead_cells := 0,
	total_cells := 1,
	m := 1
}

m = 0 & n = 11 : {
	exit()
}
m = 1 & t < 50 :{
	set("dt",0.01)}
m = 1 & t > 50 :{
	set("dt",1)}


m = 1 & t > 10000 : {
	//print ( "End: Cells=", cells, " ,Diffusion=", a, " ,Degradation=", b),
	reset(),
	t := 0,
	n := n + 1,
	//fprint (cp, n, ", ", num_cells, ", ", dor_cells, ", ", dead_cells, "\n"),
	m := 0
}

//Record

L := {};
stats := [num := 0, mean := 0, std := 0, sum := 0];

s >= 1 & m = 1 :{
		s := 0,
		L := maptocells proteins end,
		stats := statistics L,
		fprint (sp, n, ", ", t, ", ", stats.num, ", ", stats.mean, ", ", stats.std, ", ", stats.sum, ", ", dead_cells, "\n")
		//fprint (cp, t, ", ", n, ", ", num_cells, ", ", ext_glucose, ", ", dead_cells, "\n")
		}

};

//ecoli ([x:=0, y:=0], program p());

